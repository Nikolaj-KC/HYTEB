import math as mat
import subprocess
import shutil

import load_write



class inversion_module:
    """
    class containing modules to setup a PEST inversion in the HYTEB enviroment
   

    """   
    
    
#==============================================================================
    def __init__(self,inversion_ini='inversion_setup.ini', model_dis ='model_dis.ini', hydro_ini = 'hydro_ini.ini',geophys_ini='geophys_TEM.ini'):
#==============================================================================
        self.write = load_write.write_file()              
        self.load = load_write.load_file()        
        
        self.load.ini_model_dis(model_dis)
        self.load.ini_hydro(hydro_ini)
        self.load.ini_inversion(inversion_ini)
        self.load.ini_geophys(geophys_ini)
        
#        # --- load from inversion_setup.ini ---
#        self.load.pp_file_name       = load.pp_file_name
#        self.load.pp_name            = load.pp_name
#
#
#        # --- load from model_dis.ini ---        
#        self.load.dx                 = load.dx
#        self.load.dy                 = load.dy
#        self.load.dz                 = load.dz
#        self.load.n_layer            = load.n_layer
#        self.load.n_cap              = load.n_cap
#        self.load.x                  = load.x
#        self.load.y                  = load.y
#        self.load.nx                 = load.nx
#        self.load.ny                 = load.ny
#        self.load.n_pp_x             = load.n_pp_x
#        self.load.n_pp_y             = load.n_pp_y
#        
#        # --- load from hydro.ini.ini ---
#        self.load.model_name         = load.model_name
#        self.load.dtype_model        = load.dtype_model
#        self.load.ibound             = load.ibound
#        self.load.dtype_ibound       = load.dtype_ibound
#        self.load.por_name           = load.por_name
#        self.load.dtype_por          = load.dtype_por
#        self.load.recharge           = load.recharge
#        self.load.dtype_recharge     = load.dtype_recharge
#        self.load.model_name_calib   = load.model_name_calib
#        self.load.modflow_file_name  = load.modflow_file_name
#==============================================================================
    def batch_all_models(self,mf_nam,pp_x,pp_y,grid=1,pp_file_name=[]):
#==============================================================================
        """
        Write batch file for running both the geophysical and hydrolodical models
        
        Parameters
        ----------
        mf_nam :            str
            string with name of modflow nam file for running the calibration      
        pp_x :              List(int)  
            python list - node positions of pilot points in column direction
        pp_y :              List(int)
            python list - node positions of pilot points in row direction
        grid :              int
            grid number used when running model, see ini file for discretization        
        pp_file_name :      Optional(List(str))
            Python list with sufix to fac2real-ini files 

        """        
        
        print 'batch_allmodels:           '
        
        # --- open file for writing ---
        fid1 = open('allmodels.bat','w')  
        
        fid1.write('@echo off'+'\n')
        fid1.write('echo ALLMODELS'+'\n')
        fid1.write('Rem ###################################'+'\n')
        fid1.write('Rem DELETE MODFLOW OUTPUT FILES'+'\n')
        fid1.write('Rem ###################################'+'\n')
        fid1.write('\n')
        fid1.write('del '+self.load.modflow_file_name+'_calib.hds'+'\n')
        fid1.write('del '+self.load.modflow_file_name+'_calib.cbb'+'\n')
        fid1.write('del '+self.load.modflow_file_name+'_calib.dnn'+'\n')
        if self.load.rch_est != 0:
            tmp = self.load.rch_est_calc.split('.')
            fid1.write('del '+tmp[0]+'.ref'+'\n')
        fid1.write('del hk_diff_L*.dat'+'\n')
        fid1.write('del '+self.load.model_name_calib+'*.ref'+'\n')    
        fid1.write('\n')
        fid1.write('\n')
        fid1.write('Rem ###################################'+'\n')
        fid1.write('Rem Now the actual model is run'+'\n')
        fid1.write('Rem ###################################'+'\n')
        fid1.write('\n')
        fid1.write('for %%k in (')
        
        # --- run all geophysical measurements ---
        for i in range(len(pp_y)):
            fid1.write(str(pp_y[i])+' ')
        fid1.write( ') do ('+'\n')
        fid1.write('    for %%j in (')
        for j in range(len(pp_x)):
            fid1.write(str(pp_x[j])+' ')
        fid1.write(') do ('+'\n')        
        fid1.write('        '+self.load.geophys_software+'.exe  '+self.load.mod_file+'%%k_%%j.mod > nul'+'\n')
        fid1.write('   )'+'\n')
        fid1.write(')'+'\n')
        fid1.write('\n')
        
        # --- run PEST utility to interpolate parameter values from pilot point 
        # --- file to grid cells 
        fid1.write('set /A %F = '+str(self.load.n_layer)+'\n')
        fid1.write('\n')        
        fid1.write('for /L %%k in (1,1,%F%) do ('+'\n')
        
        # --- use grid defind in HYTEB ini ---
        if grid == 1:             
                fid1.write('   	fac2real.exe < fac2real_L%%k.in > nul'+'\n')
        if grid == 2:
            for pp_name in pp_file_name:
                fid1.write('   	fac2real.exe < fac2real_L%%k'+pp_name+'.in > nul'+'\n')
        fid1.write(')'+'\n')
        fid1.write('\n')
        
        #--- petrophysical parameter estimation with pilot points ---
        if self.load.petro_est ==-3:
            fid1.write(self.load.petro_est_calc+'\n') 
            
        # --- calc recharge qua linear log log relatioship ---    
        if self.load.rch_est != 0:
            fid1.write(self.load.rch_est_calc+'\n')             
        fid1.write('\n') 
        
        # --- run regularization ---
        fid1.write(self.load.reg_calc+'\n')
        
        # --- run modflow-2000 ---
        fid1.write('mf2k.exe '+mf_nam+'.nam > nul'+'\n')
        
        # --- run PEST utilities to read binary output data into acis files ---
        fid1.write('mod2obs.exe < mod2obs.in > nul'+'\n')
        fid1.write('bud2smp.exe < bud2smp_model.in > nul'+'\n')
        fid1.write('\n')      

        fid1.close()
